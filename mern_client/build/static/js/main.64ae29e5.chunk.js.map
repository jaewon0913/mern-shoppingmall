{"version":3,"sources":["umc.jpg","layout/Header.js","layout/Navigation.js","layout/Bottom.js","component/customer/Login.js","component/customer/About.js","component/customer/Top.js","component/customer/Board.js","route/Router.js","App.js","component/manager/List.js","component/manager/Update.js","component/manager/Product.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","getPosition","navigator","geolocation","getCurrentPosition","position","setState","lat","coords","latitude","lon","longitude","error","console","log","timeout","enableHighAccuracy","maximunAge","getWeather","state","fetch","then","response","json","temperature","Math","floor","main","temp","name","weather","icon","this","img_url","className","alt","src","to","Component","Navigation","Bottom","Login","type","id","placeholder","href","Content","style","width","margin","align","textAlign","Top","callApi","a","body","data","res","catch","err","marginTop","map","products","key","top_product_idx","top_product_name","top_product_price","Board","Router","path","component","About","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.64ae29e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/umc.ef832394.jpg\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Header.css';\n\nconst API_KEY = '364cb38bbe1103844106eaeb83ab9267';\n\nclass Header extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            lat: 0,\n            lon: 0,\n            temperature: 0,\n            name: '',\n            icon: '',\n        }\n    }\n\n    getPosition = () => {\n        const options = {\n            timeout: 10000,\n            enableHighAccuracy: true,\n            maximunAge: 0\n        };\n\n        if(navigator.geolocation){\n            navigator.geolocation.getCurrentPosition((position) => {\n                this.setState({\n                    lat: position.coords.latitude,\n                    lon: position.coords.longitude\n                });\n            }, (error) => {\n                console.log(error);\n            },options);\n        }\n        this.getWeather();\n    }\n\n    getWeather = () => {\n        const { lat, lon } = this.state;\n\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=Seoul&APPID=${API_KEY}`)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    temperature: Math.floor(json.main.temp - 273.15),\n                    name: json.weather[0].main,\n                    icon: json.weather[0].icon,\n                });\n            });\n    }\n\n    componentDidMount() {\n        this.getPosition()\n    }\n\n    render(){\n        const { temperature, name, icon } = this.state;\n        const img_url = `http://openweathermap.org/img/w/${icon}.png`;\n\n        return (\n            <div className = \"Container\">\n                <div className = \"Search\">\n                    <h1>MERN shopping mall</h1>\n                </div>\n                <div className = \"Element\">\n                    <div className = \"Weather\">\n                        <img alt= \"weather_icon\" src = {img_url} />\n                        &nbsp;&nbsp;\n                        <span>온도 : {temperature} ℃</span>\n                        &nbsp;&nbsp;&nbsp;\n                        <span>날씨 : {name}</span>\n                    </div>\n                    <div className = \"ShortCut\">\n                        <Link to=\"/login\">로그인</Link>&nbsp;&nbsp;&nbsp;회원가입\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Navigation.css';\n\nclass Navigation extends Component {\n    render() {\n        return (\n            <div className = \"Nav\">\n                <ul className = \"NavList\">\n                    <li className = \"NavItem\"><Link to='/about'>About Us</Link></li>\n                    <li className = \"NavItem\"><Link to='/top'>Top</Link></li>\n                    <li className = \"NavItem\">Bottom</li>\n                    <li className = \"NavItem\">ETC.</li>\n                    <li className = \"NavItem\"><Link to=\"/board\">Board</Link></li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;","import React, { Component } from 'react';\n\nimport './Bottom.css';\n\nclass Bottom extends Component {\n    render(){\n        return (\n            <div className = \"Container\">\n                <div className = \"Element\">\n                    사업자 정보\n                </div>\n                <div className = \"Element2\">\n                    위치 정보\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Bottom;","import React, { Component } from 'react';\n\nimport './Login.css';\n\nclass Login extends Component {\n    render() {\n        return (\n            <div className = \"LoginTab\">\n                <form>\n                    <input type = \"text\" id = \"LoginId\" placeholder = \"id\" />\n                    <br/>\n                    <input type = \"password\" id = \"LoginPw\" placeholder = \"Password\" />\n                    <br/>\n\n                    <button>아이디/비밀번호 찾기</button>\n                    <button>회원가입</button>\n\n                    <div className = \"LoginBtn\">\n                        <a href=\"\" >Login</a>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Login;","import React, { Component } from 'react';\n\nclass Content extends Component {\n    render () {\n        const style = {\n            width : '70%',\n            margin : '0 auto',\n            align : 'center'\n        }\n\n        const info = {\n            textAlign : 'center'\n        }\n        return (\n            <div style = {style}>\n                <div style = {info}>\n                    <h1>MERN STACK STUDY</h1>\n                    <hr/>\n                    <span>MySQL | Express | React | Node</span>\n                    <hr/>\n                    <span>React/Node Site 2020 Created by Jaewon</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Content;","import React, { Component } from 'react';\n\nclass Top extends Component {\n\n    constructor() {\n        super();\n        this.state = {data: []};\n    }\n\n    componentDidMount(){\n        this.callApi()\n            .then(res => this.setState({data: res}))\n            .catch(err => console.log(err));\n    }\n\n    callApi = async() => {\n        const response = await fetch('api/top');\n        const body = await response.json();\n        return body;\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Mern Top Product List</h3>\n                <table className = \"table table-striped\" style ={{marginTop: 20}}>\n                    <thead>\n                        <tr>\n                            <th>번호</th>\n                            <th>이름</th>\n                            <th>가격</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.data.map(products => (\n                            <tr key = {products.top_product_idx}>\n                                <td>{products.top_product_idx}</td>\n                                <td>{products.top_product_name}</td>\n                                <td>{products.top_product_price}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default Top;","import React, { Component } from 'react';\n\nclass Board extends Component {\n    render() {\n        return (\n            <div>\n                게시판\n            </div>\n        )\n    }\n}\n\nexport default Board;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Login, About, Top, Board } from './index';\n\nconst Router = () => (\n    <Switch>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/top\" component={Top} />\n        <Route path=\"/board\" component={Board} />\n    </Switch>\n);\n\nexport default Router;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, BrowserRouter } from 'react-router-dom';\n\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nimport Header from './layout/Header';\nimport Navigation from './layout/Navigation';\nimport Bottom from './layout/Bottom';\nimport Routers from './route/Router';\n\n\nimport logo from \"./umc.jpg\";\n\nimport List from \"./component/manager/List\";\nimport Update from \"./component/manager/Update\";\nimport Product from \"./component/manager/Product\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className = \"Layout\">\n          <Header />\n          <Navigation />\n              <Routers />\n          <Bottom />\n        </div>\n      </BrowserRouter>\n      // <Router>\n      //   <div className=\"container\">\n      //     <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      //       <a className=\"navbar-brand\" href=\"#\" target=\"_blank\">\n      //         <img src={logo} width=\"30\" height=\"30\" alt=\"#\" />\n      //       </a>\n      //       <Link to=\"/\" className=\"navbar-brand\">MERN 관리자 화면</Link>\n      //       <div className=\"collpase navbar-collapse\">\n      //         <ul className=\"navbar-nav mr-auto\">\n      //           <li className=\"navbar-item\">\n      //             <Link to=\"/product\" className=\"nav-link\">물품 관리</Link>\n      //           </li>\n      //           <li className=\"navbar-item\">\n      //             <Link to=\"/member\" className=\"nav-link\">회원 관리</Link>\n      //           </li>\n      //           <li className=\"navbar-item\">\n      //             <Link to=\"/order\" className=\"nav-link\">주문 관리</Link>\n      //           </li>\n      //         </ul>\n      //       </div>\n      //     </nav>\n      //     <br/>\n      //     <Route path=\"/\" exact component={List} />\n      //     <Route path=\"/update/:id\" component={Update} />\n      //     <Route path=\"/product\" component={Product} />\n      //   </div>\n      // </Router>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nexport default class List extends Component {\n    render() {\n        return (\n            <div>\n                <p>MERN 관리자 화면</p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\n\nexport default class Update extends Component {\n    render() {\n        return (\n            <div>\n                <p>Welcome to Edit Component!!</p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\n\nexport default class Product extends Component {\n\n    constructor() {\n        super();\n        this.state = {data: []};\n    }\n\n    componentDidMount(){\n        this.callApi()\n            .then(res => this.setState({data: res}))\n            .catch(err => console.log(err));\n    }\n\n    callApi = async() => {\n        const response = await fetch('http://localhost:4000/api/top');\n        const body = await response.json();\n        return body;\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Mern Top Product List</h3>\n                <table className = \"table table-striped\" style ={{marginTop: 20}}>\n                    <thead>\n                        <tr>\n                            <th>번호</th>\n                            <th>이름</th>\n                            <th>가격</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.data.map(products => (\n                            <tr key = {products.top_product_idx}>\n                                <td>{products.top_product_idx}</td>\n                                <td>{products.top_product_name}</td>\n                                <td>{products.top_product_price}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}